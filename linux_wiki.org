* command
  
** pwd
print working directory

** rmdir
remove directory

** clear
clear screen
This will clear all text and leave you with the $ prompt at the top of hte window.

** cat (concatenate)
display the content of a file to the screen

** less (view file contents)
This command writes the contents of a file ontothe screen one page a time.
Press the [space-bar] if you want to see another page, and type [q] if you want to quit reading
"less" can be more usefull for reading long files than cat.

** head (view top of file)
writes the first ten lines of a file to the screen.
$ head -3 [filename]

** tail (view bottom of file)
writes the last ten lines of a file to the screen.

** Searching the contents of a file
*** Simple searching using "less"
$ less [filename]
then, still in less type a forward slash "/" followed by the word you wnat to search for,
/long ---------- for example

*** grep
searches files for specified words or patterns.
$ grep long [filename]
For example:
$ grep long types.h

LONG and long in UNIX are distinguished. To ignore upper/lower case, use -i option
$ grep -i long types.h

To search for a phraser or pattern, you must enclose it in sigle quotes (the apostrophe symbol). For exmaple:
$ grep -i 'long int' types.h

Some of the other options of grep are:
-v dispaly those lines that do NOT match
-n precede each matching line with the line number
-c print only the total count of matched lines

** wc (word count)
$ wc -w types.h
counts how many word in types.h

$ wc -l types.h
find out how many lines the file has

* Redirecting the Output
use the ">" symbol to redirect the output of a command. For example:
$ cat > list1
Then type anything needed. Press [Return] after each one.
--------------------------------------------------------
pear
banana
apple
^D  # this means press [Ctrl] and [d] to stop
--------------------------------------------------------
The "cat" command reads the standard input (the keyboard) and the > redirects the output, which normally goes to the screen, into a file called list1

* Appending to a file
The double greater-than symbol >> appends standard output to a file. 
$ cat >> list1
Then type in the names of more fruit
-------------------------------
peach
grape
orange
^D
-------------------------------

** Join two files into a new file
$ cat list1 list2 > biglist
reading the contents of both files list1 and list2 in turn, then outputing the text to the file biglist

* Redirecting the Input
use < symbol to redirect the input of a command.
------------------------------------
$ sort
dog
cat
bird
ape
^D
----------------------------
output will be
--------------------------
ape
bird
cat
dog
-----------------------------

$ sort < biglist
used to sort the names in the biglist

$ sort < biglist > slist
sort the names in the biglist and then write them into slist.


* Pipes
A efficient technophiles, connect the output of the two command. For example:
$ who | sort
* notes
** what about ^z
** PGI compiler

* --------------------Bash shell----------------------
* history
stored in .bash_history
it is the command record before login
* alias
used for rename command

* job control, foreground, background
Chapter 17 in vbird

* shell script
* wildcard
